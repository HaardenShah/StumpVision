<?php
declare(strict_types=1);

/**
 * StumpVision — api/lib/CardRenderer.php
 * All ImageMagick drawing lives here. Returns slide PNGs + cover PNG.
 */

namespace StumpVision;

use Imagick;
use ImagickDraw;
use ImagickPixel;
use Throwable;

require_once __DIR__ . '/Util.php';

final class CardRenderer
{
    /** Build all slides + cover. Returns [slides[], coverPng] */
    public static function render(array $match, string $cardsDir, string $baseName): array
    {
        if (!extension_loaded('imagick')) {
            throw new \RuntimeException('Imagick extension not available');
        }

        // Defensive extracts
        $meta   = (isset($match['meta'])   && is_array($match['meta']))   ? $match['meta']   : [];
        $teams  = (isset($match['teams'])  && is_array($match['teams']))  ? $match['teams']  : [[], []];
        $inns   = (isset($match['innings'])&& is_array($match['innings'])) ? $match['innings'] : [];

        $Aname = Util::safeStr($teams[0]['name'] ?? 'Team A', 'Team A');
        $Bname = Util::safeStr($teams[1]['name'] ?? 'Team B', 'Team B');

        // Summaries
        [$Ar,$Aw,$Ao] = self::summaryFor(0, $inns, Util::safeInt($meta['ballsPerOver'] ?? 6, 6));
        [$Br,$Bw,$Bo] = self::summaryFor(1, $inns, Util::safeInt($meta['ballsPerOver'] ?? 6, 6));

        $winner = ($Ar === $Br) ? 'Tie'
                 : (($Ar > $Br) ? "$Aname win by " . ($Ar - $Br) . " runs"
                                : "$Bname win by " . ($Br - $Ar) . " runs");

        $extrasA = isset($inns[0]['extras']) && is_array($inns[0]['extras']) ? $inns[0]['extras'] : ['nb'=>0,'wd'=>0,'b'=>0,'lb'=>0];
        $extrasB = isset($inns[1]['extras']) && is_array($inns[1]['extras']) ? $inns[1]['extras'] : ['nb'=>0,'wd'=>0,'b'=>0,'lb'=>0];

        $topBat = self::topBatter($inns[0] ?? []);
        $topBowl= self::topBowler($inns[0] ?? []);

        // Paths
        $slides = [
            $cardsDir . "/{$baseName}-s0.png",
            $cardsDir . "/{$baseName}-s1.png",
            $cardsDir . "/{$baseName}-s2.png",
            $cardsDir . "/{$baseName}-s3.png",
        ];
        $coverPng = $cardsDir . "/{$baseName}-cover.png";

        // Render slides
        try {
            // Slide 0: Title
            $c0 = self::mkCanvas();
            self::text($c0, "🏏 StumpVision", 540, 220, 64, '#67e8f9', 'center');
            self::text($c0, "Match Recap",    540, 300, 48, '#e5e7eb', 'center');
            self::box($c0, 150, 360, 780, 360, 26);
            self::text($c0, Util::safeStr($meta['title'] ?? 'Untitled Match','Untitled Match'), 540, 520, 44, '#e5e7eb', 'center');
            self::text($c0, date('M j, Y'), 540, 580, 32, '#9ca3af', 'center');
            self::save($c0, $slides[0]);

            // Slide 1: Scores (aligned columns)
            $c1 = self::mkCanvas();
            self::box($c1, 120, 360, 360, 280, 24);
            self::box($c1, 600, 360, 360, 280, 24);
            self::text($c1, $Aname, 300, 390, 36, '#e5e7eb', 'center');
            self::text($c1, $Bname, 780, 390, 36, '#e5e7eb', 'center');
            self::text($c1, "{$Ar}/{$Aw}", 300, 520, 74, '#67e8f9', 'center');
            self::text($c1, "{$Br}/{$Bw}", 780, 520, 74, '#67e8f9', 'center');
            self::text($c1, "{$Ao} ov", 300, 570, 30, '#9ca3af', 'center');
            self::text($c1, "{$Bo} ov", 780, 570, 30, '#9ca3af', 'center');
            self::text($c1, "🏆 {$winner}", 540, 740, 44, '#67e8f9', 'center');
            self::save($c1, $slides[1]);

            // Slide 2: Highlights
            $c2 = self::mkCanvas();
            self::box($c2, 100, 320, 880, 480, 24);
            $batLine  = Util::safeStr($topBat['name']) . ' — ' . Util::safeInt($topBat['runs']) . ' (' . Util::safeInt($topBat['balls']) . ')';
            $bowlLine = Util::safeStr($topBowl['name']) . ' — ' . Util::safeInt($topBowl['wickets']) . '/' . Util::safeInt($topBowl['runs']);
            self::text($c2, "Top Batter", 540, 420, 30, '#9ca3af', 'center');
            self::text($c2, $batLine,     540, 470, 42, '#e5e7eb', 'center');
            self::text($c2, "Top Bowler", 540, 540, 30, '#9ca3af', 'center');
            self::text($c2, $bowlLine,    540, 590, 42, '#e5e7eb', 'center');
            $exA = "A Extras: nb ".Util::safeInt($extrasA['nb']??0).", wd ".Util::safeInt($extrasA['wd']??0).", b ".Util::safeInt($extrasA['b']??0).", lb ".Util::safeInt($extrasA['lb']??0);
            $exB = "B Extras: nb ".Util::safeInt($extrasB['nb']??0).", wd ".Util::safeInt($extrasB['wd']??0).", b ".Util::safeInt($extrasB['b']??0).", lb ".Util::safeInt($extrasB['lb']??0);
            self::text($c2, $exA, 540, 660, 28, '#9ca3af', 'center');
            self::text($c2, $exB, 540, 700, 28, '#9ca3af', 'center');
            self::save($c2, $slides[2]);

            // Slide 3: Outro
            $c3 = self::mkCanvas();
            self::text($c3, "Generated by StumpVision", 540, 520, 40, '#e5e7eb', 'center');
            self::text($c3, "stump.vision",              540, 580, 34, '#9ca3af', 'center');
            self::save($c3, $slides[3]);

            // Cover = slide 1
            @copy($slides[1], $coverPng);
        } catch (Throwable $e) {
            throw new \RuntimeException('Imagick render error: ' . $e->getMessage());
        }

        return [$slides, $coverPng];
    }

    /* ---------------- private helpers ---------------- */

    /** innings summary: [runs, wickets, oversString] for team index */
    private static function summaryFor(int $teamIndex, array $innings, int $bpo): array
    {
        foreach ($innings as $inn) {
            if (!is_array($inn)) continue;
            if (($inn['batting'] ?? null) === $teamIndex) {
                $r  = Util::safeInt($inn['runs'] ?? 0);
                $w  = Util::safeInt($inn['wickets'] ?? 0);
                $bp = Util::safeInt($inn['ballsPerOver'] ?? $bpo, $bpo);
                $bs = Util::safeInt($inn['balls'] ?? 0);
                $overs = floor($bs / max(1,$bp)) . "." . ($bs % max(1,$bp));
                return [$r, $w, $overs];
            }
        }
        return [0,0,'0.0'];
    }

    /** heuristic top batter */
    private static function topBatter(array $inn): array
    {
        $top = ['name'=>'—','runs'=>0,'balls'=>0];
        $rows = isset($inn['batStats']) && is_array($inn['batStats']) ? $inn['batStats'] : [];
        foreach ($rows as $row) {
            if (!is_array($row)) continue;
            if (Util::safeInt($row['runs'] ?? 0) > $top['runs']) {
                $top = [
                    'name'=> Util::safeStr($row['name'] ?? '—','—'),
                    'runs'=> Util::safeInt($row['runs'] ?? 0),
                    'balls'=> Util::safeInt($row['balls'] ?? 0),
                ];
            }
        }
        return $top;
    }

    /** heuristic top bowler */
    private static function topBowler(array $inn): array
    {
        $top = ['name'=>'—','wickets'=>0,'runs'=>0];
        $rows = isset($inn['bowlStats']) && is_array($inn['bowlStats']) ? $inn['bowlStats'] : [];
        foreach ($rows as $row) {
            if (!is_array($row)) continue;
            $w = Util::safeInt($row['wickets'] ?? 0);
            if ($w > $top['wickets']) {
                $top = [
                    'name'=> Util::safeStr($row['name'] ?? '—','—'),
                    'wickets'=> $w,
                    'runs'=> Util::safeInt($row['runs'] ?? 0),
                ];
            }
        }
        return $top;
    }

    private static function mkCanvas(int $w = 1080, int $h = 1080): Imagick
    {
        $im = new Imagick();
        $im->newImage($w, $h, new ImagickPixel('#0b1120'));
        $im->setImageFormat('png');
        return $im;
    }

    private static function text(Imagick $im, string $text, float $x, float $y, int $size, string $color, string $align = 'left'): void
    {
        $d = new ImagickDraw();
        $d->setFillColor(new ImagickPixel($color));
        $d->setFontSize($size);
        if ($align === 'center') $d->setTextAlignment(Imagick::ALIGN_CENTER);
        elseif ($align === 'right') $d->setTextAlignment(Imagick::ALIGN_RIGHT);
        $im->annotateImage($d, $x, $y, 0, $text);
    }

    private static function box(Imagick $im, int $x, int $y, int $w, int $h, int $r = 20, string $stroke = '#22314b', string $fill = 'rgba(255,255,255,0.03)'): void
    {
        $d = new ImagickDraw();
        $d->setFillColor(new ImagickPixel($fill));
        $d->setStrokeColor(new ImagickPixel($stroke));
        $d->setStrokeWidth(2);
        $d->roundRectangle($x, $y, $x+$w, $y+$h, $r, $r);
        $im->drawImage($d);
    }

    private static function save(Imagick $im, string $path): void
    {
        $im->writeImage($path);
        $im->clear(); $im->destroy();
    }
}
